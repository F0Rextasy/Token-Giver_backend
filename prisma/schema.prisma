generator client {
  provider = "prisma-client-js"
  // output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model Settings {
  key          String  @id @default("default")
  gameIsActive Boolean @default(false) @map("game_is_active")

  gameName         String  @default("Token Giver") @map("game_name")
  gameLogo         String? @map("game_logo")
  gamePreviewImage String? @map("game_preview_image")
  tgChannelUrl     String? @map("tg_channel_url")
  tgChatUrl        String? @map("tg_chat_url")
  tgSupportUrl     String? @map("tg_support_url")

  tgStarsInUSD          Float   @default(0.013) @map("tg_stars_in_usd")
  premiumPriceInTgStars Int     @default(1000) @map("premium_price_in_tg_stars")
  lastDayRewardIsCyclic Boolean @default(true) @map("last_day_reward_is_cyclic")

  inviteUserRewardCoins        Float @default(3000) @map("invite_reward_coins")
  inviteUserRewardGems         Float @default(0) @map("invite_reward_gems")
  invitePremiumUserRewardCoins Float @default(7000) @map("invite_premium_reward_coins")
  invitePremiumUserRewardGems  Float @default(1) @map("invite_premium_reward_gems")
  inviteTaskRewardPercentCoins Float @default(0.05) @map("invite_task_reward_percent_coins")
  inviteGameRewardPercentCoins Float @default(0.01) @map("invite_game_reward_percent_coins")

  @@map("settings")
}

model Leaderboards {
  id        String                   @id @default(uuid())
  coins     LeaderboardByCoins[]
  gems      LeaderboardByGems[]
  referrals LeaderboardByReferrals[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("liderboard")
}

model LeaderboardByCoins {
  id     String @id @default(uuid())
  score  Int    @default(1)
  shift  Int    @default(0)
  amount Float

  leaderboard   Leaderboards @relation(fields: [leaderboardId], references: [id])
  leaderboardId String       @unique @map("leaderboard_id")
  user          User         @relation(fields: [userId], references: [id])
  userId        String       @unique @map("user_id")

  @@map("liderboard_by_coins")
}

model LeaderboardByGems {
  id     String @id @default(uuid())
  score  Int    @default(1)
  shift  Int    @default(0)
  amount Float

  leaderboard   Leaderboards @relation(fields: [leaderboardId], references: [id])
  leaderboardId String       @unique @map("leaderboard_id")
  user          User         @relation(fields: [userId], references: [id])
  userId        String       @unique @map("user_id")

  @@map("liderboard_by_gems")
}

model LeaderboardByReferrals {
  id     String @id @default(uuid())
  score  Int    @default(1)
  shift  Int    @default(0)
  amount Float

  leaderboard   Leaderboards @relation(fields: [leaderboardId], references: [id])
  leaderboardId String       @unique @map("leaderboard_id")
  user          User         @relation(fields: [userId], references: [id])
  userId        String       @unique @map("user_id")

  @@map("liderboard_by_referrals")
}

model KingTheHill {
  key                 String    @id @default("default")
  priceInTgStars      Int       @default(100) @map("price_in_tg_stars")
  maxDays             Int       @default(30) @map("max_days")
  rewardCoinsInMinute Float     @default(1) @map("reward_coins_in_minute")
  isKing              Boolean   @default(false) @map("is_king")
  startedAt           DateTime? @map("started_at")

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @map("user_id")

  @@map("king_the_hill")
}

model UserTelegramData {
  id                    String  @id @default(uuid())
  isLive                Boolean @default(false) @map("is_live")
  isRtl                 Boolean @default(false) @map("is_rtl")
  isPremium             Boolean @default(false) @map("is_premium")
  isBot                 Boolean @default(false) @map("is_bot")
  firstName             String  @map("first_name")
  lastName              String? @map("last_name")
  username              String?
  languageCode          String  @map("language_code")
  photoUrl              String? @map("photo_url")
  addedToAttachmentMenu Boolean @default(false) @map("added_to_attachment_menu")
  allowsWriteToPm       Boolean @default(false) @map("allows_write_to_pm")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User?

  @@map("user_telegram_data")
}

model User {
  id         String   @id @default(uuid())
  telegramId String   @unique @map("telegram_id")
  tonWallet  String   @unique @map("ton_wallet")
  coins      Float    @default(0)
  gems       Float    @default(0)
  isInited   Boolean  @default(false)
  role       RoleEnum @default(USER)
  isBanned   Boolean  @default(false)
  isDeleted  Boolean  @default(false)
  startDay   Int      @default(1)

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastStartedAt DateTime? @map("last_started_at")
  banExpiredAt  DateTime? @map("banned_expired_at")
  deletedAt     DateTime? @map("deleted_at")

  payments               Payments[]
  referrals              User[]                  @relation("UserReferral")
  inviter                User?                   @relation("UserReferral", fields: [inviterId], references: [id])
  inviterId              String?                 @map("inviter_id")
  kingTheHill            KingTheHill?
  telegramData           UserTelegramData?       @relation(fields: [telegramDataId], references: [id])
  telegramDataId         String?                 @unique @map("telegram_data_id")
  premiumSubscription    PremiumSubscription?    @relation(fields: [premiumSubscriptionId], references: [id])
  premiumSubscriptionId  String?                 @unique @map("premium_subscription_id")
  language               Language                @relation(fields: [languageId], references: [id])
  languageId             String                  @map("language_id")
  leaderboardByCoins     LeaderboardByCoins?
  leaderboardByGems      LeaderboardByGems?
  leaderboardByReferrals LeaderboardByReferrals?

  @@map("users")
}

enum RoleEnum {
  SUPER_ADMIN
  ADMIN
  USER
}

model Reward {
  id         String           @id @default(uuid())
  coins      Float            @default(0)
  bonusCoins Float            @default(0)
  gems       Float            @default(0)
  bonusGems  Float            @default(0)
  reason     ReasonRewardEnum

  createdAt DateTime @default(now()) @map("created_at")

  @@map("reward")
}

enum ReasonRewardEnum {
  REFERRAL
  TASK
  BOOST
}

model Language {
  id         String @id @default(uuid())
  name       String
  nativeName String @map("native_name")
  iso6391    String @unique @map("iso_639_1")
  iso6392    String @unique @map("iso_639_2")
  iso6393    String @unique @map("iso_639_3")

  users User[]

  @@map("language")
}

model Currency {
  id         String  @id @default(uuid())
  name       String
  symbol     String
  key        String  @unique
  iso4217Num String? @unique @map("iso_4217_num")

  payments Payments[]

  @@map("currency")
}

model BoostScore {
  id             Int     @id @default(autoincrement())
  priceInTgStars Int     @map("price_in_tg_stars")
  coins          Float
  discount       Float
  isActive       Boolean @default(true) @map("is_active")

  @@map("boost_score")
}

model DaysReward {
  day   Int   @id @default(1)
  coins Float @default(0)

  @@map("days_reward")
}

model PremiumSubscription {
  id       String  @id @default(uuid())
  isActive Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiredAt DateTime @map("expired_at")

  user     User?
  payments Payments[]

  @@map("premium_subscription")
}

model Payments {
  id     String            @id @default(uuid())
  status PaymentStatusEnum @default(PENDING)
  type   PaymentTypeEnum   @default(ONE_TIME)
  method PaymentMethodEnum @default(TG_STARS)

  amount       String @default("0")
  exchangeRate String @default("0")

  token   String? @unique
  linkPay String?
  details Json?   @db.JsonB

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user                  User                 @relation(fields: [userId], references: [id])
  userId                String               @map("user_id")
  currency              Currency             @relation(fields: [currencyId], references: [id])
  currencyId            String               @map("currency_id")
  premiumSubscription   PremiumSubscription? @relation(fields: [premiumSubscriptionId], references: [id])
  premiumSubscriptionId String?              @map("premium_subscription_id")

  @@map("payments")
}

enum PaymentStatusEnum {
  PENDING
  SUCCESS
  CANCELED
  FAILED
  EXPIRED
}

enum PaymentTypeEnum {
  SUBSCRIPTION
  ONE_TIME
}

enum PaymentMethodEnum {
  TG_STARS
  TON
  USDT
}
