generator client {
  provider = "prisma-client-js"
  // output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum DefaultEnum {
  DEFAULT
}

model Settings {
  key                 DefaultEnum @id @default(DEFAULT)
  gameIsActive        Boolean     @default(false) @map("game_is_active")
  gameName            String      @default("Airdroper") @map("game_name")
  gameLogoUrl         String?     @map("game_logo_url")
  gamePreviewImageUrl String?     @map("game_preview_image_url")
  tgChannelUrl        String?     @map("tg_channel_url")
  tgChatUrl           String?     @map("tg_chat_url")
  tgSupportUrl        String?     @map("tg_support_url")
  tgStarsInUSD        Float       @default(0.013) @map("tg_stars_in_usd")

  @@map("settings")
}

model ReferralPrizes {
  type   ReferralPrizesTypeEnum @id
  prizes Prizes[]

  referralSettings    ReferralSettings @relation(fields: [referralSettingsKey], references: [key])
  referralSettingsKey DefaultEnum      @map("referral_settings_key")

  @@map("referral_prizes")
}

enum ReferralPrizesTypeEnum {
  BRO
  SLEEP
  NEW_USER
  NEW_PREMIUM_USER
  NEW_LVL_UP
}

model ReferralSettings {
  key            DefaultEnum      @id @default(DEFAULT)
  prizers        ReferralPrizes[]
  taskPercent    Float            @default(0.05) @map("task_percent")
  gamePercent    Float            @default(0.01) @map("game_percent")
  paymentPercent Float            @default(0.10) @map("payment_percent")

  @@map("referral_settings")
}

model AppLedgerSettings {
  key               DefaultEnum @id @default(DEFAULT)
  profitPercent     Float       @default(0.3) @map("profit_percent")
  airdropPercent    Float       @default(0.3) @map("airdrop_percent")
  commissionPercent Float       @default(0.2) @map("commission_percent")
  prizesPrecent     Float       @default(0.2) @map("prizes_precent")

  @@map("app_ledger_settings")
}

model AppWallets {
  id                 String   @id @default(uuid())
  currency           Currency @relation(fields: [currencyId], references: [id])
  currencyId         String   @map("currency_id")
  total_balance      Float    @default(0) @map("total_balance")
  referral_balance   Float    @default(0) @map("referral_balance")
  airdrop_balance    Float    @default(0) @map("airdrop_balance")
  commission_balance Float    @default(0) @map("commission_balance")
  prizes_balance     Float    @default(0) @map("prizes_balance")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("app_wallets")
}

model Prizes {
  id     String         @id @default(uuid())
  type   WalletTypeEnum
  amount Float

  referralPrizes     ReferralPrizes?         @relation(fields: [referralPrizesType], references: [type])
  referralPrizesType ReferralPrizesTypeEnum? @map("referral_prizes_type")

  daysReward                DaysReward?              @relation(fields: [daysRewardId], references: [day])
  daysRewardId              Int?                     @map("days_reward_id")
  vipSubscriptionSettings   VIPSubscriptionSettings? @relation(fields: [vipSubscriptionSettingsId], references: [type])
  vipSubscriptionSettingsId VIPSubscriptionTypeEnum? @map("vip_subscription_settings_id")
  shop                      Shop?                    @relation(fields: [shopId], references: [id])
  shopId                    String?                  @map("shop_id")
  leaderboardPlaces         LeaderboardPlaces?       @relation(fields: [leaderboardPlacesId], references: [id])
  leaderboardPlacesId       String?                  @map("leaderboard_places_id")
  leaderboardPrizes         LeaderboardPrizes?       @relation(fields: [leaderboardPrizesId], references: [id])
  leaderboardPrizesId       String?                  @map("leaderboard_prizes_id")

  @@map("prizes")
}

model League {
  type     LeagueTypeEnum @id
  minValue Int
  maxValue Int

  leaderboardPlaces LeaderboardPlaces[]

  @@map("leagues")
}

enum LeagueTypeEnum {
  WOOD
  STONE
  IRON
  BRONZE
  SILVER
  GOLD
  TITANIUM
  DIAMOND
  NEPHRITE
  ORICHALCUM
  MITHRIL
  ADAMANTIUM
  DRAGONSTEEL
  STARSTEEL
}

model LeaderboardPlaces {
  id            String   @id @default(uuid())
  place         Int
  previousPlace Int      @map("previous_place")
  score         Float
  isRewarded    Boolean  @default(false) @map("is_rewarded")
  prizes        Prizes[]

  user          User?           @relation(fields: [userId], references: [id])
  userId        String?         @unique @map("user_id")
  leaderboard   Leaderboards    @relation(fields: [leaderboardId], references: [id])
  leaderboardId String          @map("leaderboard_id")
  league        League?         @relation(fields: [leagueId], references: [type])
  leagueId      LeagueTypeEnum? @map("league_id")

  @@map("leaderboard_places")
}

model Leaderboards {
  id     String              @id @default(uuid())
  type   LeaderboardTypeEnum
  places LeaderboardPlaces[]
  result Json?               @db.JsonB

  startedAt DateTime? @map("started_at")
  endedAt   DateTime? @map("ended_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId String   @map("currency_id")

  @@map("leaderboards")
}

model LeaderboardPrizes {
  id         String   @id @default(uuid())
  startPlace Int      @map("start_place")
  endPlace   Int      @map("end_place")
  prizes     Prizes[]

  @@map("leaderboard_prizes")
}

enum LeaderboardTypeEnum {
  MAIN
  AP
  AIRDROP
  REFERRAL
  SQUAD
  MAIN_SQUAD
}

model KingTheHillSettings {
  key                DefaultEnum @id @default(DEFAULT)
  duractionInMinutes Int         @default(60) @map("duraction_in_minutes")

  @@map("king_the_hill_settings")
}

model KingTheHill {
  id         String                    @id @default(uuid())
  walletType KingTheHillWalletTypeEnum @map("wallet_type")
  isActive   Boolean                   @default(true) @map("is_active")
  bank       Float                     @default(0)

  endedAt   DateTime @map("ended_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  transactions KingTheHillTransactions[]
  user         User                      @relation(fields: [userId], references: [id])
  userId       String                    @unique @map("user_id")

  @@map("king_the_hill")
}

model KingTheHillTransactions {
  id         String                    @id @default(uuid())
  amount     Float
  walletType KingTheHillWalletTypeEnum @map("wallet_type")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  kingTheHill   KingTheHill @relation(fields: [kingTheHillId], references: [id])
  kingTheHillId String      @unique @map("king_the_hill_id")

  @@map("king_the_hill_transactions")
}

enum KingTheHillWalletTypeEnum {
  COINS
  GEMS
  STARS
  TON
  USDT
}

model UserTelegramData {
  id                    String  @id @default(uuid())
  isLive                Boolean @default(false) @map("is_live")
  isRtl                 Boolean @default(false) @map("is_rtl")
  isPremium             Boolean @default(false) @map("is_premium")
  isBot                 Boolean @default(false) @map("is_bot")
  firstName             String  @map("first_name")
  lastName              String? @map("last_name")
  username              String?
  languageCode          String  @map("language_code")
  photoUrl              String? @map("photo_url")
  addedToAttachmentMenu Boolean @default(false) @map("added_to_attachment_menu")
  allowsWriteToPm       Boolean @default(false) @map("allows_write_to_pm")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User?

  @@map("user_telegram_data")
}

model Referral {
  id         String  @id @default(uuid())
  isMain     Boolean @default(true)
  inviter    User    @relation("inviter", fields: [inviterId], references: [id])
  inviterId  String  @map("inviter_id")
  referral   User    @relation("referral", fields: [referralId], references: [id])
  referralId String  @map("referral_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model User {
  id               String       @id @default(uuid())
  description      String?      @db.VarChar(100)
  telegramId       String       @unique @map("telegram_id")
  tonWallet        String?      @unique @map("ton_wallet")
  isInited         Boolean      @default(false)
  role             UserRoleEnum @default(USER)
  isBanned         Boolean      @default(false)
  isDeleted        Boolean      @default(false)
  gameSessionCount Int          @default(1)

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastStartedAt DateTime? @map("last_started_at")
  banExpiredAt  DateTime? @map("banned_expired_at")
  deletedAt     DateTime? @map("deleted_at")

  wallets            UserWallets[]
  socialLinks        SocialLinks[]
  payments           Payments[]
  referrals          Referral[]          @relation("referral")
  inviters           Referral[]          @relation("inviter")
  kingTheHill        KingTheHill?
  telegramData       UserTelegramData?   @relation(fields: [telegramDataId], references: [id])
  telegramDataId     String?             @unique @map("telegram_data_id")
  vipSubscription    VIPSubscription?    @relation(fields: [vipSubscriptionId], references: [id])
  vipSubscriptionId  String?             @unique @map("vip_subscription_id")
  language           Language            @relation(fields: [languageId], references: [id])
  languageId         String              @map("language_id")
  tasksProgress      TaskProgress[]
  leaderboardsPlaces LeaderboardPlaces[]

  @@map("users")
}

model SocialLinks {
  id   String             @id @default(uuid())
  link String
  type SocialLinkTypeEnum

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")
}

enum SocialLinkTypeEnum {
  INSTAGRAM
  TELEGRAM
  X
  YOUTUBE
  TIKTOK
  TWITCH
  VK
  GITHUB
  DISCORD
  TROVO
  STEAM
  FACEBOOK
  BOOSTY
}

enum UserRoleEnum {
  SUPER_ADMIN
  ADMIN
  USER
}

model UserWallets {
  id          String         @id @default(uuid())
  type        WalletTypeEnum
  balance     Float          @default(0)
  totalEarned Float          @default(0) @map("total_earned")
  holding     Float          @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  walletTransactions WalletTransactions[]

  @@map("user_wallets")
}

enum WalletTypeEnum {
  COINS
  GEMS
  TICKETS
  AP
  STARS
  TON
  USDT
}

model WalletTransactions {
  id                String                        @id @default(uuid())
  type              WalletTransactionTypeEnum
  status            WalletTransactionsStatusEnum
  amount            Float
  isHold            Boolean                       @default(false)
  reason            WalletTransactionsReasonEnum?
  withdrawalAddress String?

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  holdExpiredAt DateTime? @map("hold_expired_at")

  userWallets   UserWallets @relation(fields: [userWalletsId], references: [id])
  userWalletsId String      @map("user_wallets_id")

  @@map("wallet_transactions")
}

enum WalletTransactionTypeEnum {
  PLUS
  MINUS
}

enum WalletTransactionsStatusEnum {
  PENDING
  COMPLETED
}

enum WalletTransactionsReasonEnum {
  P_REFERRAL_INVITE
  P_REFERRAL_PERCENT
  P_DAILY_BONUS
  P_BONUS
  P_TASK
  P_AGE
  P_REFAUND
  P_KING_THE_HILL
  P_BOOST_SCORE

  M_USD
  M_FINE
  M_GAME
}

model Language {
  id         String @id @default(uuid())
  name       String
  nativeName String @map("native_name")
  iso6391    String @unique @map("iso_639_1")
  iso6392    String @unique @map("iso_639_2")
  iso6393    String @unique @map("iso_639_3")

  users           User[]
  taskTitles      TaskTitles[]
  taskDecriptions TaskDecriptions[]

  @@map("language")
}

model Currency {
  id         String  @id @default(uuid())
  name       String
  symbol     String
  key        String  @unique
  iso4217Num String? @unique @map("iso_4217_num")

  payments    Payments[]
  appWallets  AppWallets[]
  leadrboards Leaderboards[]

  @@map("currency")
}

model DaysReward {
  day    Int      @id @default(1)
  prizes Prizes[]

  @@map("days_reward")
}

model Shop {
  id        String            @id @default(uuid())
  category  ShopCategoryEnum
  isActive  Boolean           @default(true) @map("is_active")
  priceType ShopPriceTypeEnum
  price     Float             @default(950) @map("price")
  discount  Float             @default(1)
  prizes    Prizes[]
  payments  Payments[]

  @@map("shop")
}

enum ShopPriceTypeEnum {
  COINS
  GEMS
  STARS
}

enum ShopCategoryEnum {
  LOOTBOXES
  PACKS
  GEMS
  COINS
  TIKETS
}

model VIPSubscriptionSettings {
  type           VIPSubscriptionTypeEnum @id
  priceInTgStars Float                   @default(950) @map("price_in_tg_stars")
  discount       Float                   @default(1) @map("discount")
  prizes         Prizes[]

  @@map("vip_subscription_settings")
}

model VIPSubscription {
  id       String                  @id @default(uuid())
  isActive Boolean                 @default(false)
  type     VIPSubscriptionTypeEnum

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiredAt DateTime @map("expired_at")

  user     User?
  payments Payments[]

  @@map("vip_subscription")
}

enum VIPSubscriptionTypeEnum {
  PLUS
  PRO
  PREMIUM
}

model Payments {
  id     String            @id @default(uuid())
  status PaymentStatusEnum @default(PENDING)
  type   PaymentTypeEnum   @default(ONE_TIME)
  method PaymentMethodEnum @default(STARS)

  amount       String @default("0")
  exchangeRate String @default("0")

  token   String? @unique
  linkPay String?
  details Json?   @db.JsonB

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user              User             @relation(fields: [userId], references: [id])
  userId            String           @map("user_id")
  currency          Currency         @relation(fields: [currencyId], references: [id])
  currencyId        String           @map("currency_id")
  vipSubscription   VIPSubscription? @relation(fields: [vipSubscriptionId], references: [id])
  vipSubscriptionId String?          @map("vip_subscription_id")
  shop              Shop?            @relation(fields: [shopId], references: [id])
  shopId            String?          @map("shop_id")

  @@map("payments")
}

enum PaymentStatusEnum {
  PENDING
  SUCCESS
  CANCELED
  FAILED
  EXPIRED
}

enum PaymentTypeEnum {
  SUBSCRIPTION
  ONE_TIME
}

enum PaymentMethodEnum {
  STARS
  TON
  USDT
}

model Partner {
  id                 String  @id @default(uuid())
  name               String
  logoUrl            String
  backgroundImageUrl String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Tasks Task[]

  @@map("partner")
}

model TaskTitles {
  id    String @id @default(uuid())
  title String

  language   Language @relation(fields: [languageId], references: [id])
  languageId String   @map("language_id")
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     String   @map("task_id")

  @@map("task_title")
}

model TaskDecriptions {
  id          String @id @default(uuid())
  description String

  language   Language @relation(fields: [languageId], references: [id])
  languageId String   @map("language_id")
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     String   @map("task_id")

  @@map("task_descriptons")
}

model Task {
  id           String            @id @default(uuid())
  titles       TaskTitles[]
  descriptions TaskDecriptions[]

  prizes             TaskPrizes[]
  icon               TaskIconEnum
  type               TaskTypeEnum @default(LINK_TIME)
  data               String
  duractionInSeconds Int?
  checkTgChatId      String?

  isPremium Boolean          @default(false)
  isHiRisk  Boolean          @default(false)
  category  TaskCategoryEnum

  isProgressing Boolean @default(false)
  progressKey   String?
  progressValue Float?

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  experiredAt DateTime? @map("expired_at")

  partner   Partner?       @relation(fields: [partnerId], references: [id])
  partnerId String?        @map("partner_id")
  progress  TaskProgress[]

  @@map("task")
}

model TaskPrizes {
  id         String         @id @default(uuid())
  walletType WalletTypeEnum
  amount     Int

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String @map("task_id")

  @@map("task_prizes")
}

enum TaskIconEnum {
  OTHER
  EMOJI
  ADS
  BOOST
  GAME
  PERCENT
  FRIEND
  PREMIUM_FRIEND
  AGE
  ROBOT
  PREMIUM
  STAR
  TON
  WALLET
  X
  TELEGRAM
  YOUTUBE
  TIKTOK
  INSTAGRAM
  FACEBOOK
  BOOSTY
  DISCORD
  VK
  GITHUB
  COINMARKETCAP
  VIBER
  WHATSAPP
  WECHAT
  DZEN
  OK
  STEAM
  TWITCH
  TROVO
  APPSTORE
  GOOGLEPLAY
}

enum TaskCategoryEnum {
  GAME
  DAILY
  PARTNER
  ACHIEVEMENT
}

enum TaskTypeEnum {
  CUSTOM_EMOJI
  EMOJI_NAME
  STRING_NAME
  TG_SUBSCRIPTION
  TG_BOOST
  TG_REACTION
  WALLET
  REFERRAL
  LINK_TIME
}

model TaskProgress {
  id     String                 @id @default(uuid())
  status TaskProgressStatusEnum
  value  Float

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String @map("task_id")
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("task_progress")
}

enum TaskProgressStatusEnum {
  PENDING
  IN_PROGRESS
  COMPLETED
  EXPIRED
}
