generator client {
  provider = "prisma-client-js"
  // output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum DefaultEnum {
  DEFAULT
}

model Settings {
  key          DefaultEnum @id @default(DEFAULT)
  gameIsActive Boolean     @default(false) @map("game_is_active")

  gameName            String  @default("Token Giver") @map("game_name")
  gameLogoUrl         String? @map("game_logo")
  gamePreviewImageUrl String? @map("game_preview_image")
  tgChannelUrl        String? @map("tg_channel_url")
  tgChatUrl           String? @map("tg_chat_url")
  tgSupportUrl        String? @map("tg_support_url")

  tgStarsInUSD          Float   @default(0.013) @map("tg_stars_in_usd")
  lastDayRewardIsCyclic Boolean @default(true) @map("last_day_reward_is_cyclic")

  premiumPriceInTgStars Int   @default(1000) @map("premium_price_in_tg_stars")
  premiumDiscount       Float @default(1) @map("premium_discount")

  inviteUserRewardCoins        Float @default(3000) @map("invite_reward_coins")
  inviteUserRewardGems         Float @default(0) @map("invite_reward_gems")
  invitePremiumUserRewardCoins Float @default(7000) @map("invite_premium_reward_coins")
  invitePremiumUserRewardGems  Float @default(1) @map("invite_premium_reward_gems")
  inviteTaskRewardPercentCoins Float @default(0.05) @map("invite_task_reward_percent_coins")
  inviteGameRewardPercentCoins Float @default(0.01) @map("invite_game_reward_percent_coins")

  @@map("settings")
}

model CurrencyRates {
  key           DefaultEnum @id @default(DEFAULT)
  rates         Json?       @db.JsonB
  coinmarketcap Json?       @db.JsonB

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("currency_rates")
}

model League {
  type     LeagueTypeEnum @id
  minValue Int
  maxValue Int

  mainLeaderboard MainLeaderboard[]

  @@map("leagues")
}

enum LeagueTypeEnum {
  WOOD
  STONE
  IRON
  BRONZE
  SILVER
  GOLD
  TITANIUM
  DIAMOND
  NEPHRITE
  ORICHALCUM
  MITHRIL
  ADAMANTIUM
  DRAGONSTEEL
  STARSTEEL
}

model MainLeaderboard {
  id            String @id @default(uuid())
  place         Int    @default(1)
  previousPlace Int    @default(1)
  score         Float

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  league     League         @relation(fields: [leagueType], references: [type])
  leagueType LeagueTypeEnum
  user       User           @relation(fields: [userId], references: [id])
  userId     String         @unique @map("user_id")

  @@map("main_leaderboard")
}

model APLeaderboard {
  id            String @id @default(uuid())
  place         Int    @default(1)
  previousPlace Int    @default(1)
  score         Float

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  @@map("ap_leaderboard")
}

model Prizes {
  id     String         @id @default(uuid())
  type   WalletTypeEnum
  amount Float

  apLeaderboardPrizes   APLeaderboardPrizes? @relation(fields: [apLeaderboardPrizesId], references: [id])
  apLeaderboardPrizesId String?              @unique @map("ap_leaderboard_prizes_id")

  @@map("prizes")
}

model APLeaderboardPrizes {
  id         String @id @default(uuid())
  startPlace Int    @default(1)
  endPlace   Int    @default(10)

  prizes Prizes[]

  @@map("ap_leaderboard_prizes")
}

model ReferralLeaderboard {
  id            String @id @default(uuid())
  place         Int    @default(1)
  previousPlace Int    @default(1)
  score         Float

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  @@map("referral_leaderboard")
}

model KingTheHill {
  key                 DefaultEnum @id @default(DEFAULT)
  priceInTgStars      Int         @default(100) @map("price_in_tg_stars")
  discount            Float       @default(1)
  maxDays             Int         @default(30) @map("max_days")
  rewardCoinsInMinute Float       @default(1) @map("reward_coins_in_minute")
  isKing              Boolean     @default(false) @map("is_king")
  startedAt           DateTime?   @map("started_at")

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @map("user_id")

  @@map("king_the_hill")
}

model UserTelegramData {
  id                    String  @id @default(uuid())
  isLive                Boolean @default(false) @map("is_live")
  isRtl                 Boolean @default(false) @map("is_rtl")
  isPremium             Boolean @default(false) @map("is_premium")
  isBot                 Boolean @default(false) @map("is_bot")
  firstName             String  @map("first_name")
  lastName              String? @map("last_name")
  username              String?
  languageCode          String  @map("language_code")
  photoUrl              String? @map("photo_url")
  addedToAttachmentMenu Boolean @default(false) @map("added_to_attachment_menu")
  allowsWriteToPm       Boolean @default(false) @map("allows_write_to_pm")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User?

  @@map("user_telegram_data")
}

model User {
  id               String       @id @default(uuid())
  description      String?      @db.VarChar(100)
  telegramId       String       @unique @map("telegram_id")
  tonWallet        String?      @unique @map("ton_wallet")
  isInited         Boolean      @default(false)
  role             UserRoleEnum @default(USER)
  isBanned         Boolean      @default(false)
  isDeleted        Boolean      @default(false)
  gameSessionCount Int          @default(1)

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastStartedAt DateTime? @map("last_started_at")
  banExpiredAt  DateTime? @map("banned_expired_at")
  deletedAt     DateTime? @map("deleted_at")

  wallets               UserWallets[]
  socialLinks           SocialLinks[]
  payments              Payments[]
  referrals             User[]               @relation("UserReferral")
  inviter               User?                @relation("UserReferral", fields: [inviterId], references: [id])
  inviterId             String?              @map("inviter_id")
  kingTheHill           KingTheHill?
  telegramData          UserTelegramData?    @relation(fields: [telegramDataId], references: [id])
  telegramDataId        String?              @unique @map("telegram_data_id")
  premiumSubscription   PremiumSubscription? @relation(fields: [premiumSubscriptionId], references: [id])
  premiumSubscriptionId String?              @unique @map("premium_subscription_id")
  language              Language             @relation(fields: [languageId], references: [id])
  languageId            String               @map("language_id")
  apLeaderboard         APLeaderboard?
  mainLeaderboard       MainLeaderboard?
  referralLeaderboard   ReferralLeaderboard?
  tasksProgress         TaskProgress[]

  @@map("users")
}

model SocialLinks {
  id   String             @id @default(uuid())
  link String
  type SocialLinkTypeEnum

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")
}

enum SocialLinkTypeEnum {
  INSTAGRAM
  TELEGRAM
  X
  YOUTUBE
  TIKTOK
  TWITCH
  VK
  GITHUB
  DISCORD
  TROVO
  STEAM
  FACEBOOK
  BOOSTY
}

enum UserRoleEnum {
  SUPER_ADMIN
  ADMIN
  USER
}

model UserWallets {
  id          String         @id @default(uuid())
  type        WalletTypeEnum
  balance     Float          @default(0)
  totalEarned Float          @default(0) @map("total_earned")
  holding     Float          @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  walletTransactions WalletTransactions[]

  @@map("user_wallets")
}

enum WalletTypeEnum {
  COINS
  GEMS
  TICKETS
  AP
  STARS
  TON
  USDT
}

model WalletTransactions {
  id                String                        @id @default(uuid())
  type              WalletTransactionTypeEnum
  status            WalletTransactionsStatusEnum
  amount            Float
  isHold            Boolean                       @default(false)
  reason            WalletTransactionsReasonEnum?
  withdrawalAddress String?

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  holdExpiredAt DateTime? @map("hold_expired_at")

  userWallets   UserWallets @relation(fields: [userWalletsId], references: [id])
  userWalletsId String      @map("user_wallets_id")

  @@map("wallet_transactions")
}

enum WalletTransactionTypeEnum {
  DEPOSIT
  WITHDRAWAL
}

enum WalletTransactionsStatusEnum {
  PENDING
  COMPLETED
}

enum WalletTransactionsReasonEnum {
  DEPOSIT_REFERRAL_INVITE
  DEPOSIT_REFERRAL_PERCENT
  DEPOSIT_DAILY_BONUS
  DEPOSIT_BONUS
  DEPOSIT_TASK
  DEPOSIT_AGE
  DEPOSIT_REFAUND
  DEPODIT_KING_THE_HILL
  DEPOSIT_BOOST_SCORE

  WITHDRAWAL_USD
  WITHDRAWAL_FINE
  WITHDRAWAL_GAME
}

model Language {
  id         String @id @default(uuid())
  name       String
  nativeName String @map("native_name")
  iso6391    String @unique @map("iso_639_1")
  iso6392    String @unique @map("iso_639_2")
  iso6393    String @unique @map("iso_639_3")

  users           User[]
  taskTitles      TaskTitles[]
  taskDecriptions TaskDecriptions[]

  @@map("language")
}

model Currency {
  id         String  @id @default(uuid())
  name       String
  symbol     String
  key        String  @unique
  iso4217Num String? @unique @map("iso_4217_num")

  payments Payments[]

  @@map("currency")
}

model BoostScore {
  id             Int     @id @default(autoincrement())
  priceInTgStars Int     @map("price_in_tg_stars")
  coins          Float
  bonus          Float   @default(1)
  discount       Float   @default(1)
  isActive       Boolean @default(true) @map("is_active")

  payments Payments[]

  @@map("boost_score")
}

model DaysReward {
  day   Int   @id @default(1)
  coins Float @default(0)
  gems  Float @default(0)

  @@map("days_reward")
}

model PremiumSubscription {
  id       String  @id @default(uuid())
  isActive Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiredAt DateTime @map("expired_at")

  user     User?
  payments Payments[]

  @@map("premium_subscription")
}

model Payments {
  id     String            @id @default(uuid())
  status PaymentStatusEnum @default(PENDING)
  type   PaymentTypeEnum   @default(ONE_TIME)
  method PaymentMethodEnum @default(TG_STARS)

  amount       String @default("0")
  exchangeRate String @default("0")

  token   String? @unique
  linkPay String?
  details Json?   @db.JsonB

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user                  User                 @relation(fields: [userId], references: [id])
  userId                String               @map("user_id")
  currency              Currency             @relation(fields: [currencyId], references: [id])
  currencyId            String               @map("currency_id")
  premiumSubscription   PremiumSubscription? @relation(fields: [premiumSubscriptionId], references: [id])
  premiumSubscriptionId String?              @map("premium_subscription_id")
  boostScore            BoostScore?          @relation(fields: [boostScoreId], references: [id])
  boostScoreId          Int?                 @map("boost_score_id")

  @@map("payments")
}

enum PaymentStatusEnum {
  PENDING
  SUCCESS
  CANCELED
  FAILED
  EXPIRED
}

enum PaymentTypeEnum {
  SUBSCRIPTION
  ONE_TIME
}

enum PaymentMethodEnum {
  TG_STARS
  TON
  USDT
}

model Partner {
  id                 String  @id @default(uuid())
  name               String
  logoUrl            String
  backgroundImageUrl String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Tasks Task[]

  @@map("partner")
}

model TaskTitles {
  id    String @id @default(uuid())
  title String

  language   Language @relation(fields: [languageId], references: [id])
  languageId String   @map("language_id")
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     String   @map("task_id")

  @@map("task_title")
}

model TaskDecriptions {
  id          String @id @default(uuid())
  description String

  language   Language @relation(fields: [languageId], references: [id])
  languageId String   @map("language_id")
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     String   @map("task_id")

  @@map("task_descriptons")
}

model Task {
  id           String            @id @default(uuid())
  titles       TaskTitles[]
  descriptions TaskDecriptions[]

  prizes             TaskPrizes[]
  icon               TaskIconEnum
  type               TaskTypeEnum @default(LINK_TIME)
  data               String
  duractionInSeconds Int?
  checkTgChatId      String?

  isPremium Boolean          @default(false)
  isHiRisk  Boolean          @default(false)
  category  TaskCategoryEnum

  isProgressing Boolean @default(false)
  progressKey   String?
  progressValue Float?

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  experiredAt DateTime? @map("expired_at")

  partner   Partner?       @relation(fields: [partnerId], references: [id])
  partnerId String?        @map("partner_id")
  progress  TaskProgress[]

  @@map("task")
}

model TaskPrizes {
  id         String         @id @default(uuid())
  walletType WalletTypeEnum
  amount     Int

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String @map("task_id")

  @@map("task_prizes")
}

enum TaskIconEnum {
  OTHER
  EMOJI
  ADS
  BOOST
  GAME
  PERCENT
  FRIEND
  PREMIUM_FRIEND
  AGE
  ROBOT
  PREMIUM
  STAR
  TON
  WALLET
  X
  TELEGRAM
  YOUTUBE
  TIKTOK
  INSTAGRAM
  FACEBOOK
  BOOSTY
  DISCORD
  VK
  GITHUB
  COINMARKETCAP
  VIBER
  WHATSAPP
  WECHAT
  DZEN
  OK
  STEAM
  TWITCH
  TROVO
  APPSTORE
  GOOGLEPLAY
}

enum TaskCategoryEnum {
  GAME
  DAILY
  PARTNER
  ACHIEVEMENT
}

enum TaskTypeEnum {
  CUSTOM_EMOJI
  EMOJI_NAME
  STRING_NAME
  TG_SUBSCRIPTION
  TG_BOOST
  TG_REACTION
  WALLET
  REFERRAL
  LINK_TIME
}

model TaskProgress {
  id     String                 @id @default(uuid())
  status TaskProgressStatusEnum
  value  Float

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String @map("task_id")
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("task_progress")
}

enum TaskProgressStatusEnum {
  PENDING
  IN_PROGRESS
  COMPLETED
  EXPIRED
}
